#include "DevicePropertyName.h"
#include <map>
#include <initguid.h>
#include <Devpkey.h>

#define DEVPKEY_STRINGIZE(pkey) {pkey, L#pkey}

static bool operator<(const DEVPROPKEY& left, const DEVPROPKEY& right) {
    return memcmp(&left, &right, sizeof(DEVPROPKEY)) < 0;
}

static std::map<DEVPROPKEY, std::wstring> s_devicePropertyKeyNamesTable = {
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Address),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_BaseContainerId),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_BusNumber),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_BusRelations),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_BusReportedDeviceDesc),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_BusTypeGuid),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Capabilities),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Characteristics),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Children),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Class),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ClassGuid),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_CompatibleIds),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ConfigFlags),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ContainerId),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DeviceDesc),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DevNodeStatus),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DevType),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DHP_Rebalance_Policy),
    // DEVPKEY_STRINGIZE(DEVPKEY_Device_DmaRemappingPolicy),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Driver),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverCoInstallers),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverDate),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverDesc),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverInfPath),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverInfSection),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverInfSectionExt),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverLogoLevel),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverPropPageProvider),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverProvider),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverRank),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_DriverVersion),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_EjectionRelations),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_EnumeratorName),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Exclusive),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_FirstInstallDate),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_FriendlyName),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_GenericDriverInstalled),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_HardwareIds),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_InstallDate),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_InstallState),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_InstanceId),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Legacy),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_LegacyBusType),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_LocationInfo),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_LocationPaths),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_LowerFilters),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Manufacturer),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_MatchingDeviceId),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ModelId),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_NoConnectSound),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Parent),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_PDOName),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_PhysicalDeviceLocation),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_PowerData),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_PowerRelations),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ProblemCode),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ProblemStatus),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_RemovalPolicy),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_RemovalPolicyDefault),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_RemovalPolicyOverride),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_RemovalRelations),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Reported),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ResourcePickerExceptions),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_ResourcePickerTags),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_SafeRemovalRequired),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_SafeRemovalRequiredOverride),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Security),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_SecuritySDS),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Service),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_SessionId),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_Siblings),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_UINumber),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_UINumberDescFormat),
    DEVPKEY_STRINGIZE(DEVPKEY_Device_UpperFilters),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_Characteristics),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_ClassCoInstallers),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_ClassInstaller),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_ClassName),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_DefaultService),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_DevType),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_DHPRebalanceOptOut),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_Exclusive),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_Icon),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_IconPath),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_LowerFilters),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_Name),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_NoDisplayClass),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_NoInstallClass),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_NoUseClass),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_PropPageProvider),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_Security),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_SecuritySDS),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_SilentInstall),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceClass_UpperFilters),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceDisplay_Category),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceInterface_ClassGuid),
    // DEVPKEY_STRINGIZE(DEVPKEY_DeviceInterface_DefaultInterface),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceInterface_Enabled),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceInterface_FriendlyName),
    DEVPKEY_STRINGIZE(DEVPKEY_DeviceInterface_Restricted),
    DEVPKEY_STRINGIZE(DEVPKEY_DrvPkg_DetailedDescription),
    DEVPKEY_STRINGIZE(DEVPKEY_DrvPkg_DocumentationLink),
    DEVPKEY_STRINGIZE(DEVPKEY_DrvPkg_Icon),
    DEVPKEY_STRINGIZE(DEVPKEY_DrvPkg_Model),
    DEVPKEY_STRINGIZE(DEVPKEY_DrvPkg_VendorWebSite),
};

std::optional<std::wstring> getDevicePropertyKeyName(const DEVPROPKEY& propertyKey) {
    auto iter = s_devicePropertyKeyNamesTable.find(propertyKey);
    if (iter != s_devicePropertyKeyNamesTable.end()) {
        return iter->second;
    }
    return std::nullopt;
}
